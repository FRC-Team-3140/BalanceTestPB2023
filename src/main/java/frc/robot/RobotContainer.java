// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
//import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
//import frc.robot.subsystems.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

    private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // The robot's subsystems
    public final Lightshow m_lightshow = new Lightshow();
    public final DriveTrain m_driveTrain = new DriveTrain();

    // Joysticks
    private final XboxController driverController = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // A chooser for autonomous commands
    SendableChooser<Command> m_chooser = new SendableChooser<>();

    /**
     * The container for the robot. Contains subsystems, OI devices, and commands.
     */
    private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
        // Smartdashboard Subsystems
        SmartDashboard.putData(m_lightshow);
        SmartDashboard.putData(m_driveTrain);

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Test Forward", new TestForward(m_driveTrain));
        SmartDashboard.putData("Test Reverse", new TestReverse(m_driveTrain));
        SmartDashboard.putData("Test Turn", new TestTurn(m_driveTrain));
        SmartDashboard.putData("TeleOp Command", new TeleOpCommand(m_driveTrain));
        SmartDashboard.putData("Test Balance", new TestBalance(m_driveTrain));
        SmartDashboard.putData("Light Balance", new LightBalance(m_lightshow));
        SmartDashboard.putData("Light Cone", new LightCone(m_lightshow));
        SmartDashboard.putData("Light Cube", new LightCube(m_lightshow));

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
        // Configure the button bindings
        configureButtonBindings();

        // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
        m_lightshow.setDefaultCommand(new LightBalance(m_lightshow));
        m_driveTrain.setDefaultCommand(new TeleOpCommand(m_driveTrain));

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
        XboxController controller = getDriverController();
        m_driveTrain.setDefaultCommand(new BoostDrive(m_driveTrain,
                () -> -controller.getRawAxis(1),
                () -> -controller.getRawAxis(4),
                () -> controller.getRawAxis(3),
                () -> controller.getRawAxis(2)));

        // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        m_lightshow.setDriveTrain(m_driveTrain);

        SmartDashboard.putData("Auto Mode", m_chooser);
    }

    public static RobotContainer getInstance() {
        return m_robotContainer;
    }

    /**
     * Use this method to define your button->command mappings. Buttons can be
     * created by
     * instantiating a {@link GenericHID} or one of its subclasses ({@link
     * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
     * it to a
     * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
     */
    private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
        // Create some buttons
        final JoystickButton rBButton = new JoystickButton(driverController, XboxController.Button.kRightBumper.value);
        rBButton.whileTrue(new LightCube(m_lightshow).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        final JoystickButton lBButton = new JoystickButton(driverController, XboxController.Button.kLeftBumper.value);
        lBButton.whileTrue(new LightCone(m_lightshow).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        final JoystickButton xButton = new JoystickButton(driverController, XboxController.Button.kX.value);
        xButton.whileTrue(new TestBalance(m_driveTrain).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        final JoystickButton yButton = new JoystickButton(driverController, XboxController.Button.kY.value);
        yButton.whileTrue(new TestForward(m_driveTrain).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        final JoystickButton aButton = new JoystickButton(driverController, XboxController.Button.kA.value);
        aButton.whileTrue(new TestReverse(m_driveTrain).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public XboxController getDriverController() {
        return driverController;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    /**
     * Use this to pass the autonomous command to the main {@link Robot} class.
     *
     * @return the command to run in autonomous
     */
    public Command getAutonomousCommand() {
        // The selected command will be run in autonomous
        return m_chooser.getSelected();
    }

    public void runCaution(){
        m_lightshow.setMode(Lightshow.kModeCaution);
    }
    
    public void runError(){
        m_lightshow.setMode(Lightshow.kModeError);
    }
}
