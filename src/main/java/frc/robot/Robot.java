// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Robot.

package frc.robot;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;
import edu.wpi.first.math.filter.LinearFilter;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.hal.HAL;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in
 * the project.
 */
public class Robot extends TimedRobot {

    private Command m_autonomousCommand;

    private RobotContainer m_robotContainer;

    private final AHRS NAVX = new AHRS(Port.kMXP);

    NetworkTable DataNAVX;
    LinearFilter angle_filter = LinearFilter.singlePoleIIR(0.1, 0.02);;

    double m_last_pitch = 0.0;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        // Instantiate our RobotContainer. This will perform all our button bindings,
        // and put our
        // autonomous chooser on the dashboard.
        m_robotContainer = RobotContainer.getInstance();
        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);

        NetworkTableInstance inst = NetworkTableInstance.getDefault();
        DataNAVX = inst.getTable("SmartDashboard").getSubTable("DataNAVX");

    }

    /**
     * This function is called every robot packet, no matter the mode. Use this for
     * items like
     * diagnostics that you want ran during disabled, autonomous, teleoperated and
     * test.
     *
     * <p>
     * This runs after the mode specific periodic functions, but before
     * LiveWindow and SmartDashboard integrated updating.
     */
    @Override
    public void robotPeriodic() {
        // Runs the Scheduler. This is responsible for polling buttons, adding
        // newly-scheduled
        // commands, running already-scheduled commands, removing finished or
        // interrupted commands,
        // and running subsystem periodic() methods. This must be called from the
        // robot's periodic
        // block in order for anything in the Command-based framework to work.
        CommandScheduler.getInstance().run();

        // DataNAVX.getEntry("Accelerometer: x").setNumber(NAVX.getRawAccelX());
        // DataNAVX.getEntry("Accelerometer: y").setNumber(NAVX.getRawAccelY());
        // DataNAVX.getEntry("Accelerometer: z").setNumber(NAVX.getRawAccelZ());
        // DataNAVX.getEntry("Displacement: x").setNumber(NAVX.getDisplacementX());
        // DataNAVX.getEntry("Displacement: y").setNumber(NAVX.getDisplacementY());
        // DataNAVX.getEntry("Displacement: z").setNumber(NAVX.getDisplacementZ());
        // DataNAVX.getEntry("Gyro: x").setNumber(NAVX.getRawGyroX());
        // DataNAVX.getEntry("Gyro: y").setNumber(NAVX.getRawGyroY());
        // DataNAVX.getEntry("Gyro: z").setNumber(NAVX.getRawGyroZ());
        // DataNAVX.getEntry("Velocity: x").setNumber(NAVX.getVelocityX());
        // DataNAVX.getEntry("Velocity: y").setNumber(NAVX.getVelocityY());
        // DataNAVX.getEntry("Velocity: z").setNumber(NAVX.getVelocityZ());

    }

    /**
     * This function is called once each time the robot enters Disabled mode.
     */
    @Override
    public void disabledInit() {

    }

    @Override
    public void disabledPeriodic() {
        m_robotContainer.runCaution();
        updateNavX();
    }

    /**
     * This autonomous runs the autonomous command selected by your
     * {@link RobotContainer} class.
     */
    @Override
    public void autonomousInit() {
        m_autonomousCommand = m_robotContainer.getAutonomousCommand();

        // schedule the autonomous command (example)
        if (m_autonomousCommand != null) {
            m_autonomousCommand.schedule();
        }
    }

    /**
     * This function is called periodically during autonomous.
     */
    @Override
    public void autonomousPeriodic() {
        updateNavX();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (m_autonomousCommand != null) {
            m_autonomousCommand.cancel();
        }

    }

    /**
     * This function is called periodically during operator control.
     */
    @Override
    public void teleopPeriodic() {
        // displacement, Accelerometer, gyro, Velocity

        updateNavX();
    }

    public void updateNavX() {
        //System.out.println("Update NAVX");
        DataNAVX.getEntry("navx_yaw").setNumber(NAVX.getYaw());
        DataNAVX.getEntry("navx_pitch").setNumber(NAVX.getPitch());
        DataNAVX.getEntry("navx_roll").setNumber(NAVX.getRoll());
        DataNAVX.getEntry("navx_compass").setNumber(NAVX.getCompassHeading());

        DataNAVX.getEntry("navx_gyrox").setNumber(NAVX.getRawGyroX());
        DataNAVX.getEntry("navx_gyroy").setNumber(NAVX.getRawGyroY());
        DataNAVX.getEntry("navx_gyroz").setNumber(NAVX.getRawGyroZ());

        double filtered_pitch = angle_filter.calculate(NAVX.getPitch());
        DataNAVX.getEntry("navx_filtered_pitch").setNumber(filtered_pitch);

        double pitch_change = Math.abs(50.0 * (filtered_pitch - m_last_pitch)); // Estimate the pitch change per second
        m_last_pitch = filtered_pitch;

        DataNAVX.getEntry("navx_pitch_change").setNumber(pitch_change);

    }

    @Override
    public void testInit() {
        // Cancels all running commands at the start of test mode.
        CommandScheduler.getInstance().cancelAll();
    }

    /**
     * This function is called periodically during test mode.
     */
    @Override
    public void testPeriodic() {
        updateNavX();
    }

}
