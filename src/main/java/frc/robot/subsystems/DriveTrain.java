// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

import edu.wpi.first.wpilibj.interfaces.Accelerometer;
import edu.wpi.first.math.filter.LinearFilter;
import edu.wpi.first.networktables.NetworkTable;
//import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
//import edu.wpi.first.networktables.PubSubOptions;
//import edu.wpi.first.wpilibj.AddressableLED;
//import edu.wpi.first.wpilibj.AddressableLEDBuffer;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.SupplyCurrentLimitConfiguration;

/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax sparkLeft9;
    //private WPI_TalonSRX talonSRX1;
    private WPI_TalonSRX talonLeft4;
    private WPI_TalonSRX talonLeft6;
    private MotorControllerGroup leftMotorGroup;
    private CANSparkMax sparkRight8;
    //private WPI_TalonSRX talonSRX4;
    private WPI_TalonSRX talonRight5;
    private WPI_TalonSRX talonRight7;
    private MotorControllerGroup rightMotorGroup;
    private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // private AddressableLED led_strip = new AddressableLED(5);

    double accel_angle = 0.0;
    double angle_filtered = 0.0;

    double m_distance = 0.0;
    double m_speed = 0.0;
    double m_speed_filtered = 0.0;

    LinearFilter m_angle_filter;
    LinearFilter m_speed_filter;

    double afpc = 0.02;
    double aftc = 0.2;

    private Accelerometer accelerometer;

    private final Encoder leftEncoder;
    private final Encoder rightEncoder;

    NetworkTable drivetrain_table;
    // private final DoubleEntry max_speed;

    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        DigitalInput l1 = new DigitalInput(9); // yellow
        DigitalInput l2 = new DigitalInput(8); // blue
        DigitalInput r1 = new DigitalInput(7); // yellow
        DigitalInput r2 = new DigitalInput(6); // blue
        leftEncoder = new Encoder(l1, l2, true);
        rightEncoder = new Encoder(r1, r2, false);

        leftEncoder.setDistancePerPulse(1.0 / 3000.0);
        rightEncoder.setDistancePerPulse(1.0 / 3000.0);

        sparkLeft9=new CANSparkMax(9, MotorType.kBrushless);
        //talonSRX1 = new WPI_TalonSRX(2);

        talonLeft4 = new WPI_TalonSRX(4);

        talonLeft6 = new WPI_TalonSRX(6);

        leftMotorGroup = new MotorControllerGroup(sparkLeft9, talonLeft4, talonLeft6);
        addChild("Left Motor Group", leftMotorGroup);

        sparkRight8 = new CANSparkMax(8, MotorType.kBrushless);
        //talonSRX4 = new WPI_TalonSRX(3);

        talonRight5 = new WPI_TalonSRX(5);

        talonRight7 = new WPI_TalonSRX(7);

        rightMotorGroup = new MotorControllerGroup(sparkRight8, talonRight5, talonRight7);
        addChild("Right Motor Group", rightMotorGroup);

        differentialDrive1 = new DifferentialDrive(leftMotorGroup, rightMotorGroup);
        addChild("Differential Drive 1", differentialDrive1);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // talonSRX1.setSafetyEnabled(false);
        //talonSRX1.set(ControlMode.PercentOutput, 0.0);
        //talonSRX1.configOpenloopRamp(0.2);
        //talonSRX1.setInverted(false);

        // talonSRX2.setSafetyEnabled(false);
        talonLeft4.set(ControlMode.PercentOutput, 0.0);
        talonLeft4.configOpenloopRamp(0.2);
        talonLeft4.setInverted(true);

        // talonSRX3.setSafetyEnabled(false);
        talonLeft6.set(ControlMode.PercentOutput, 0.0);
        talonLeft6.configOpenloopRamp(0.2);
        talonLeft6.setInverted(false);

        // talonSRX4.setSafetyEnabled(false);
        //talonSRX4.set(ControlMode.PercentOutput, 0.0);
        //talonSRX4.configOpenloopRamp(0.2);
        //talonSRX4.setInverted(true);

        // talonSRX5.setSafetyEnabled(false);
        talonRight5.set(ControlMode.PercentOutput, 0.0);
        talonRight5.configOpenloopRamp(0.2);
        talonRight5.setInverted(false);

        // talonSRX6.setSafetyEnabled(false);
        talonRight7.set(ControlMode.PercentOutput, 0.0);
        talonRight7.configOpenloopRamp(0.2);
        talonRight7.setInverted(true);

        SupplyCurrentLimitConfiguration current_limit = new SupplyCurrentLimitConfiguration();
        current_limit.currentLimit = 30;
        //talonSRX1.configSupplyCurrentLimit(current_limit);
        talonLeft4.configSupplyCurrentLimit(current_limit);
        talonLeft6.configSupplyCurrentLimit(current_limit);
        //talonSRX4.configSupplyCurrentLimit(current_limit);
        talonRight5.configSupplyCurrentLimit(current_limit);
        talonRight7.configSupplyCurrentLimit(current_limit);

        accelerometer = new BuiltInAccelerometer();

        NetworkTableInstance inst = NetworkTableInstance.getDefault();
        // Challenges with new networktable entries - Does no show up correctly in table
        // DoubleTopic topic =
        // inst.getDoubleTopic("SmartDashboard/DriveTrain/max_speed");
        // topic.setPersistent(true);
        // topic.publish(PubSubOption.disableLocal(false),PubSubOption.disableRemote(false),PubSubOption.periodic(0.5));
        // max_speed = topic.getEntry(1.0);
        // max_speed.set(max_speed.get());

        drivetrain_table = inst.getTable("SmartDashboard").getSubTable("DriveTrain");

        // Create persistant configuration options in network table.
        aftc = drivetrain_table.getEntry("angle_filter_time_const").getNumber(0.2).doubleValue();
        afpc = drivetrain_table.getEntry("angle_filter_period_const").getNumber(0.02).doubleValue();

        drivetrain_table.getEntry("angle_filter_time_const").setNumber(aftc);
        drivetrain_table.getEntry("angle_filter_period_const").setNumber(afpc);

        drivetrain_table.getEntry("angle_filter_time_const").setPersistent();
        drivetrain_table.getEntry("angle_filter_period_const").setPersistent();

        m_angle_filter = LinearFilter.singlePoleIIR(aftc, afpc);
        m_speed_filter = LinearFilter.singlePoleIIR(0.5, 0.02);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

        checkNetworkTableChanges();

        drivetrain_table.getEntry("accel_x").setNumber(accelerometer.getX());
        drivetrain_table.getEntry("accel_y").setNumber(accelerometer.getY());
        drivetrain_table.getEntry("accel_z").setNumber(accelerometer.getZ());

        accel_angle = -Math.atan2(getAccelX(), getAccelZ()) * 180 / Math.PI;

        drivetrain_table.getEntry("accel_angle").setNumber(accel_angle);

        if (angle_filtered > 15)
            angle_filtered = 15;
        if (angle_filtered < -15)
            angle_filtered = -15;

        m_distance = leftEncoder.getDistance();
        m_speed = leftEncoder.getRate();

        m_speed_filtered = m_speed_filter.calculate(m_speed);

        drivetrain_table.getEntry("distance").setDouble(m_distance);
        drivetrain_table.getEntry("speed").setDouble(m_speed);
        drivetrain_table.getEntry("speed_filtered").setDouble(m_speed_filtered);
    }

    private void checkNetworkTableChanges() {
        // Check for a change in the angle filter values
        double new_tc = drivetrain_table.getEntry("angle_filter_time_const").getNumber(0.2).doubleValue();
        double new_pc = drivetrain_table.getEntry("angle_filter_period_const").getNumber(0.02).doubleValue();
        if (new_tc != aftc || new_pc != afpc) {
            aftc = new_tc;
            afpc = new_pc;
            m_angle_filter = LinearFilter.singlePoleIIR(aftc, afpc);
            System.out.printf("Updating angle filter values. time=%.3f period=%.3f \n", aftc, afpc);
        }

        angle_filtered = m_angle_filter.calculate(accel_angle);

        drivetrain_table.getEntry("angle_filtered").setDouble(angle_filtered);
        drivetrain_table.getEntry("speed_filtered").setDouble(m_speed_filtered);

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void arcadeDrive(double xSpeed, double zRotation) {
        drivetrain_table.getEntry("arcade_xspeed").setNumber(xSpeed);
        drivetrain_table.getEntry("arcade_zrotation").setNumber(zRotation);

        differentialDrive1.arcadeDrive(xSpeed, zRotation);
    }

    public double getAccelX() {
        return accelerometer.getX();
    }

    public double getAccelY() {
        return accelerometer.getY();
    }

    public double getAccelZ() {
        return accelerometer.getZ();
    }

    public double getAccelAngle() {
        return accel_angle;
    }

    public double getAngleFiltered() {
        return angle_filtered;
    }

    public double getSpeedFiltered() {
        return m_speed_filtered;
    }

    public double getSpeed() {
        return m_speed;
    }

    public double getPosition() {
        return m_distance;
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
